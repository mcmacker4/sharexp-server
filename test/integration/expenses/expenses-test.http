import ../groups/groups-test.http

### Login
run ../common/login.http

### Create Group
run #Create group

### Get group info for member id
run #Get group info

### Add Member to Group
run #Add member

### POST create expense
POST {{baseUrl}}/groups/{{groupId}}/expenses
Content-Type: application/json

{
  "title": "dinner",
  "amount": 17,
  "splitMethod": "PARTS",
  "paidBy": "{{memberId}}",
  "participants": {
    "{{memberId}}": 2,
    "{{altMemberId}}": 1
  }
}

> {%
    client.test("create expense", () => {
        client.assert(response.status == 200, "status ok")
    })
    client.global.set("expenseId", response.body.id)
%}

### GET group expenses
GET {{baseUrl}}/groups/{{groupId}}/expenses


### GET Expense info
GET {{baseUrl}}/groups/{{groupId}}/expenses/{{expenseId}}


### PUT Update Expense with Invalid data
PUT {{baseUrl}}/groups/{{groupId}}/expenses/{{expenseId}}
Content-Type: application/json

{
  "title": "dinner",
  "amount": -34,
  "splitMethod": "PARTS",
  "paidBy": "{{memberId}}",
  "participants": {
    "{{memberId}}": 1,
    "{{altMemberId}}": 1
  }
}

> {%
    client.test("create expense", () => {
        client.assert(response.status == 400, "status bad request")
    })
%}


### PUT Update Expense correctly
PUT {{baseUrl}}/groups/{{groupId}}/expenses/{{expenseId}}
Content-Type: application/json

{
  "title": "dinner",
  "amount": 34,
  "splitMethod": "PARTS",
  "paidBy": "{{memberId}}",
  "participants": {
    "{{memberId}}": 1,
    "{{altMemberId}}": 1
  }
}

> {%
    client.test("create expense", () => {
        client.assert(response.status == 200, "status bad request")
    })
%}


### Get balances and debts
GET {{baseUrl}}/groups/019a1ae1-bb78-76d0-bc43-3d5bcdb92793/balance
Accept: application/json